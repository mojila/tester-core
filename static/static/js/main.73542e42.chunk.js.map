{"version":3,"sources":["component/index/tester-logo.svg","context/state/index.js","context/action/index.js","context/index.js","component/index/logo.tsx","screen/index.tsx","serviceWorker.js","index.js"],"names":["module","exports","State","name","actions","Action","state","action","type","console","log","MainContext","React","createContext","MainProvider","Provider","MainState","Consumer","MainAction","Logo","dispatch","useContext","className","height","alt","src","logo","onClick","App","Boolean","window","location","hostname","match","Index","useReducer","store","value","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"oFAAAA,EAAOC,QAAU,IAA0B,yC,iLCI5BC,G,MAJD,CACZC,KAAM,WCDFC,EACI,SAaKC,MAVf,SAAiBC,EAAOC,GACtB,OAAQA,EAAOC,MACb,KAAKJ,EAEH,OADAK,QAAQC,IAAI,QACLJ,EACT,QACE,OAAOA,ICNPK,EAAcC,IAAMC,gBACpBC,EAAeH,EAAYI,SAE3BC,GADeL,EAAYM,SACff,GACZgB,EAAab,EAEJM,ICWAQ,MAff,WAAiB,IACPC,EAAaC,qBAAWV,GAAxBS,SAER,OACE,yBAAKE,UAAU,QACb,yBACEC,OAAO,MACPC,IAAI,cACJC,IAAKC,IACLC,QAAS,kBAAMP,EAAS,CAAEZ,KAAMJ,SCHzBwB,MARf,WACE,OACE,yBAAKN,UAAU,oBACb,kBAAC,EAAD,QCKcO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZN,SAASC,IAAU,IAAD,EACUC,qBAAWjB,EAAYF,GADjC,mBACToB,EADS,KACFhB,EADE,KAGhB,OACE,kBAACN,EAAD,CAAcuB,MAAO,CAAED,QAAOhB,aAC5B,kBAAC,EAAD,OAKNkB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACN,EAAD,OAEFO,SAASC,eAAe,SD+GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzC,QAAQyC,MAAMA,EAAMC,c","file":"static/js/main.73542e42.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/tester-logo.8f3994d6.svg\";","const State = {\r\n  name: 'Tester'\r\n}\r\n\r\nexport default State","const actions = {\r\n  LISTEN: 'LISTEN'\r\n}\r\n\r\nfunction Action (state, action) {\r\n  switch (action.type) {\r\n    case actions.LISTEN:\r\n      console.log('adaw')\r\n      return state\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default Action\r\nexport { actions }","import React from 'react'\r\nimport State from './state'\r\nimport Action from './action'\r\n\r\nconst MainContext = React.createContext()\r\nconst MainProvider = MainContext.Provider\r\nconst MainConsumer = MainContext.Consumer\r\nconst MainState = State\r\nconst MainAction = Action\r\n\r\nexport default MainContext\r\nexport { MainProvider, MainConsumer, MainState, MainAction }","import React, { useContext } from 'react'\r\nimport logo from './tester-logo.svg'\r\nimport '../../style/logo.scss'\r\nimport MainContext from '../../context'\r\nimport { actions } from '../../context/action'\r\n\r\nfunction Logo() {  \r\n  const { dispatch } = useContext(MainContext)\r\n\r\n  return (\r\n    <div className=\"logo\">\r\n      <img \r\n        height=\"360\" \r\n        alt=\"tester-logo\" \r\n        src={logo} \r\n        onClick={() => dispatch({ type: actions.LISTEN })}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Logo\r\n","import React from 'react';\nimport '../style/index.scss'\nimport Logo from '../component/index/logo'\n\nfunction App() {\n  return (\n    <div className=\"index background\">\n      <Logo />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { useReducer } from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './screen/index.tsx';\nimport * as serviceWorker from './serviceWorker';\nimport { MainProvider, MainState, MainAction } from './context'\n\nfunction Index () {\n  const [store, dispatch] = useReducer(MainAction, MainState)\n\n  return (\n    <MainProvider value={{ store, dispatch }}>\n      <App />\n    </MainProvider>\n  )\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <Index />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}